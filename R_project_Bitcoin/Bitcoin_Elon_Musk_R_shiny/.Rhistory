head(d, 10)
barplot(d[1:10,]$freq, las = 2, names.arg = d[1:10,]$word,
col ="lightblue", main ="Most frequent words",
ylab = "Word frequencies")
#Sentiment analysis
library(syuzhet)
library(scales)
library(reshape2)
tweets <- iconv(bitcoin_tweets$tweet)
# get sentiment scores
s <- get_nrc_sentiment(tweets)
head(s)
barplot(colSums(s),
las = 2,
col = rainbow(10),
ylab = 'Count',
main = 'Sentiment Scores Tweets')
install.packages("ndjson")
library(ndjson)
library("sentimentr")
library(tidyverse)
sentiment=sentiment_by(bitcoin_tweets$tweet)
sentiment
summary(sentiment$ave_sentiment)
qplot(sentiment$ave_sentiment,   geom="histogram",binwidth=0.1,main="Review Sentiment Histogram")
bitcoin_tweets$ave_sentiment=sentiment$ave_sentiment
bitcoin_tweets$sd_sentiment=sentiment$sd
bitcoin_tweets <- bitcoin_tweets %>%
group_by(Date) %>%
mutate(avg_sentiment = mean(ave_sentiment))
bitcoin_tweets <- bitcoin_tweets %>%
mutate(sentiment_score = if_else(avg_sentiment > 0, 'positive', if_else(avg_sentiment < 0, 'negative', 'neutral')))
bitcoin_tweets_positive <- bitcoin_tweets %>%
filter(sentiment_score == "positive")
bitcoin_tweets_negative <- bitcoin_tweets %>%
filter(sentiment_score == "negative")
bitcoin_tweets_neutral <- bitcoin_tweets %>%
filter(sentiment_score == "neutral")
#write.csv(bitcoin_tweets_positive,"~/Desktop/Bootcamp/R project/bitcoin_tweets_positive.csv", row.names = TRUE)
#write.csv(bitcoin_tweets_negative,"~/Desktop/Bootcamp/R project/bitcoin_tweets_negative.csv", row.names = TRUE)
#write.csv(bitcoin_tweets_neutral,"~/Desktop/Bootcamp/R project/bitcoin_tweets_neutral.csv", row.names = TRUE)
bitcoin_tweets_positive
bitcoin_tweets_negative
bitcoin_tweets_neutral
## graphing data points from 2 different datasets on one graph
close_price <- xts(x = bitcoin$Close, order.by = bitcoin$Date)
positive_tweet <- xts(x = bitcoin_tweets_positive$Close, order.by = bitcoin_tweets_positive$Date)
negative_tweet <- xts(x = bitcoin_tweets_negative$Close, order.by = bitcoin_tweets_negative$Date)
neutral_tweet <- xts(x = bitcoin_tweets_neutral$Close, order.by = bitcoin_tweets_neutral$Date)
joined_graph <- cbind(close_price, positive_tweet, negative_tweet, neutral_tweet)
dygraph(joined_graph) %>%
dySeries("close_price", label = "Bitcoin price") %>%
dySeries("positive_tweet", label = "Positive tweets") %>%
dySeries("negative_tweet", label = "Negative tweets") %>%
dySeries("neutral_tweet", label = "Neutral tweets") %>%
dyRangeSelector()
bitcoin_tweets %>%
filter(Date == '2021-02-07')
runApp('Desktop/Bootcamp/R project/test_5')
ggplot(data = freq_per_year, aes(x = year, y = Freq, group = genus)) +
geom_line()
#growing popularity of tweets over the years
freq_per_year <- total_tweets %>%
group_by(year) %>%
filter(year!= "2022") %>%
summarize(Freq = sum(tweet_freq))
freq_per_year
ggplot(data = freq_per_year, aes(x = year, y = Freq, group = genus)) +
geom_line()
ggplot(data = freq_per_year, aes(x = year, y = Freq)) +
geom_line()
ggplot(data = freq_per_year, aes(x = year, y = Freq,  col="green")) +
geom_line()
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = genus)) +
geom_line()
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = "green")) +
geom_line()
runApp('Desktop/Bootcamp/R project/test_5')
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = "blue")) +
geom_line()
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = year)) +
geom_line()
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = round(year)) +
geom_line()
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = year) +
geom_line()
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = year)) +
geom_line()
round(freq_per_year)
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = year)) +
geom_line()
round(freq_per_year, digits = 1)
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = year)) +
geom_line()
round(freq_per_year, digits = 0)
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = year)) +
geom_line()
floor(freq_per_year, digits = 0)
floor(freq_per_year)
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = year)) +
geom_line()
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = Freq)) +
geom_line()
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = Freq)) +
geom_line()+ggtitle("Your Title Here")
ggplot(data = freq_per_year, aes(x = year, y = Freq,  color = Freq)) +
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = Freq,  color = Freq)) +
geom_line()+ggtitle("Tweet Count 2010 - 2021")
#growing popularity of tweets over the years
freq_per_year <- total_tweets %>%
group_by(year) %>%
filter(year!= "2022") %>%
summarize(Frequnecy = sum(tweet_freq))
freq_per_year
#growing popularity of tweets over the years
freq_per_year <- total_tweets %>%
group_by(year) %>%
filter(year!= "2022") %>%
summarize(frequnecy = sum(tweet_freq))
freq_per_year
#growing popularity of tweets over the years
freq_per_year <- total_tweets %>%
group_by(year) %>%
filter(year!= "2022") %>%
summarize(frequency = sum(tweet_freq))
freq_per_year
ggplot(freq_per_year, aes(x = year, y = Freq,  color = Freq)) +
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) +
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency, face="bold")) +
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) +
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(axis.title = element_text(face="bold"))+
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(axis.title.y = element_text(face="bold"))+
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(axis.title = element_text(face="bold"))+
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(plot.title = element_text(face="bold"))+
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(plot.title = element_text(face="bold"), axis.title = element_text(face="bold") )+
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(plot.title = element_text(face="bold"), plot.title = element_text(hjust = 0.5), axis.title = element_text(face="bold") )+
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(plot.title = element_text(face="bold"), plot.title = element_text(face="bold") )+
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(plot.title = element_text(face="bold"), plot.title = element_text(face="bold"))+
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(plot.title = element_text(face="bold"), axis.title = element_text(face="bold"))+
geom_line()+ggtitle("Tweet Count 2010 - 2021")
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold"), )+
geom_line()+ggtitle("Tweet Count 2010 - 2021")
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
#tweet counts
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold"), )+
geom_line()+ggtitle("Tweets Count 2010 - 2021")
p<-ggplot(replies_counts, aes(x=year, y=Freq_of_replies, fill=Freq_of_replies)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold"))
p + ggtitle("Replies Per Year")
p<-ggplot(replies_counts, aes(x=year, y=Freq_of_replies, fill=Freq_of_replies)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Stopping distance")
p + ggtitle("Replies Per Year")
p<-ggplot(replies_counts, aes(x=year, y=Freq_of_replies, fill=Freq_of_replies)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Frequencies of replies")
p + ggtitle("Replies Per Year")
p<-ggplot(retweet_counts, aes(x=year, y=Freq_of_retweets, fill=Freq_of_retweets)) +
geom_bar(stat="identity")+heme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Frequencies of replies")
p<-ggplot(retweet_counts, aes(x=year, y=Freq_of_retweets, fill=Freq_of_retweets)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Frequencies of replies")
p + ggtitle("Retweets Per Year")
p<-ggplot(retweet_counts, aes(x=year, y=Freq_of_retweets, fill=Freq_of_retweets)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Frequencies of retweets")
p + ggtitle("Retweets Per Year")
p<-ggplot(likes_counts, aes(x=year, y=Freq_of_likes/1000000, fill=Freq_of_likes)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Frequencies of likes")
p + ggtitle("Likes Per Year")
#tweet counts
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold"))+
geom_line()+ggtitle("Tweets Count 2010 - 2021")
#tweet counts
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold"))+
geom_line()+ggtitle("Tweet Count 2010 - 2021")
head(total_tweets)
runApp('Desktop/Bootcamp/R project/Test2')
runApp('Desktop/Bootcamp/R project/Test2')
write.csv(freq_per_year,"~/Desktop/Bootcamp/R project/bitcoin_tweets.csv", row.names = TRUE)
write.csv(freq_per_year,"~/Desktop/Bootcamp/R project/freq_per_year.csv", row.names = TRUE)
replies_count <- total_tweets %>%
group_by(year) %>%
filter(year!= "2022") %>%
summarize(Freq_of_replies = sum(replies_count))
replies_count
p<-ggplot(replies_count, aes(x=year, y=Freq_of_replies, fill=Freq_of_replies)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Frequencies of replies")
p + ggtitle("Replies Per Year")
write.csv(replies_count,"~/Desktop/Bootcamp/R project/replies_count", row.names = TRUE)
retweet_counts <- total_tweets %>%
group_by(year) %>%
filter(year!= "2022") %>%
summarize(Freq_of_retweets = sum(retweets_count))
retweet_count
retweet_count <- total_tweets %>%
group_by(year) %>%
filter(year!= "2022") %>%
summarize(Freq_of_retweets = sum(retweets_count))
retweet_count
p<-ggplot(retweet_count, aes(x=year, y=Freq_of_retweets, fill=Freq_of_retweets)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Frequencies of retweets")
p + ggtitle("Retweets Per Year")
write.csv(retweet_count,"~/Desktop/Bootcamp/R project/retweet_count", row.names = TRUE)
likes_count <- total_tweets %>%
group_by(year) %>%
filter(year!= "2022") %>%
summarize(Freq_of_likes = sum(likes_count))
likes_count
p<-ggplot(likes_count, aes(x=year, y=Freq_of_likes/1000000, fill=Freq_of_likes)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Frequencies of likes")
p + ggtitle("Likes Per Year")
write.csv(likes_count"~/Desktop/Bootcamp/R project/likes_count", row.names = TRUE)
write.csv(likes_count,"~/Desktop/Bootcamp/R project/likes_count", row.names = TRUE)
runApp('Desktop/Bootcamp/R project/Test2')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
shiny::runApp('Desktop/Bootcamp/R project/test_5')
write.csv(replies_count,"~/Desktop/Bootcamp/R project/replies_count.csv", row.names = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(dygraphs)
library(xts)
#upload datasets
tweets <-read.csv(file = '~/Desktop/Bootcamp/R project/TweetsElonMusk.csv', stringsAsFactors = F)
tweets_2021 <- read.csv(file = '~/Desktop/Bootcamp/R project/2021.csv', stringsAsFactors = F)
tweets_2022 <- read.csv(file = '~/Desktop/Bootcamp/R project/2022.csv', stringsAsFactors = F)
tweets <- tweets %>%
filter(!grepl('2021', date))
total_tweets <- rbind(tweets, tweets_2021, tweets_2022)
head(total_tweets)
total_tweets <- total_tweets %>%
select(c("id", "date", "time", "username",
"tweet", "mentions", "urls", "photos", "replies_count",
"retweets_count", "likes_count", "hashtags", "link"))
head(total_tweets)
sum(is.na(total_tweets))
total_tweets$date <- ymd(total_tweets$date)
summary(total_tweets)
total_tweets$year <- as.numeric(format(total_tweets$date, "%Y"))
tweet_freq <- rep(1, 15897)
total_tweets <- data.frame(total_tweets, tweet_freq)
#growing popularity of tweets over the years
freq_per_year <- total_tweets %>%
group_by(year) %>%
filter(year!= "2022") %>%
summarize(frequency = sum(tweet_freq))
freq_per_year
#write.csv(freq_per_year,"~/Desktop/Bootcamp/R project/freq_per_year.csv", row.names = TRUE)
#tweet counts
ggplot(freq_per_year, aes(x = year, y = frequency,  color = frequency)) + theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold"))+
geom_line()+ggtitle("Tweet Count 2010 - 2021")
#https://www.kaggle.com/datasets/ayhmrba/elon-musk-tweets-2010-2021?select=2020.csv
#https://www.kaggle.com/code/andradaolteanu/bitcoin-dogecoin-on-rapids-and-elon-musk/notebook
head(total_tweets)
replies_count <- total_tweets %>%
group_by(year) %>%
filter(year!= "2022") %>%
summarize(Freq_of_replies = sum(replies_count))
replies_count
write.csv(replies_count,"~/Desktop/Bootcamp/R project/replies_count.csv", row.names = TRUE)
p<-ggplot(replies_count, aes(x=year, y=Freq_of_replies, fill=Freq_of_replies)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Frequencies of replies")
p + ggtitle("Replies Per Year")
retweet_count <- total_tweets %>%
group_by(year) %>%
filter(year!= "2022") %>%
summarize(Freq_of_retweets = sum(retweets_count))
retweet_count
#write.csv(retweet_count,"~/Desktop/Bootcamp/R project/retweet_count", row.names = TRUE)
p<-ggplot(retweet_count, aes(x=year, y=Freq_of_retweets, fill=Freq_of_retweets)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Frequencies of retweets")
p + ggtitle("Retweets Per Year")
likes_count <- total_tweets %>%
group_by(year) %>%
filter(year!= "2022") %>%
summarize(Freq_of_likes = sum(likes_count))
likes_count
#write.csv(likes_count,"~/Desktop/Bootcamp/R project/likes_count", row.names = TRUE)
p<-ggplot(likes_count, aes(x=year, y=Freq_of_likes/1000000, fill=Freq_of_likes)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Frequencies of likes")
p + ggtitle("Likes Per Year")
exp(10.98)
#filter bitcoin tweets
bitcoin_tweets <- total_tweets %>%
filter(grepl("bitcoin|Bitcoin|crypto|Crypto", tweet)) %>%
select(date, tweet)
bitcoin_tweets <- bitcoin_tweets %>%
rename(Date = date)
bitcoin_tweets
#upload bitcoin dataset
bitcoin <-read.csv(file = '~/Desktop/Bootcamp/R project/BTC-USD.csv', stringsAsFactors = F)
bitcoin$Date <- ymd(bitcoin$Date)
head(bitcoin)
close_price <- xts(x = bitcoin$Close, order.by = bitcoin$Date)
# visualization of bitcoin prices from 2014 to 2022
p <- dygraph(close_price, main = "Bitcoin closing prices 2014-2022") %>%
dyOptions(labelsUTC = TRUE, fillGraph=TRUE, fillAlpha=0.1, drawGrid = FALSE, colors="#D8AE5A") %>%
dyRangeSelector() %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE)  %>%
dyRoller(rollPeriod = 1)
p
#merge bitcoin and tweets in one dataset
bitcoin_tweets <- merge(bitcoin, bitcoin_tweets, by = "Date")
bitcoin_tweets <- bitcoin_tweets[, c(1,2,3,4,5, 7, 8)]
head(bitcoin_tweets)
#write.csv(bitcoin_tweets,"~/Desktop/Bootcamp/R project/bitcoin_tweets.csv", row.names = TRUE)
## graphing data points from 2 different datasets on one graph
ggplot() +
geom_point(data = bitcoin, aes(x = Date, y = Close), color = "blue") +   # must include argument label "data"
geom_point(data = bitcoin_tweets, aes(x = Date, y = Close))
## graphing data points from 2 different datasets on one graph
close_price <- xts(x = bitcoin$Close, order.by = bitcoin$Date)
tweet_price <- xts(x = bitcoin_tweets$Close, order.by = bitcoin_tweets$Date)
prices <- cbind(close_price, tweet_price)
dygraph(prices) %>%
dySeries("close_price", label = "Bitcoin price") %>%
dySeries("tweet_price", label = "Elon Musk tweet") %>%
dyRangeSelector()
bitcoin_new <- bitcoin[bitcoin$Date > "2018-01-01" &    # Extract data frame subset
bitcoin$Date < "2022-03-01", ]
bitcoin_new <- bitcoin_new[, c(1,2,3,4,5, 7)]
head(bitcoin_new)                                      # Print new data frame
#10 day moving average
library(tidyquant)
bitcoin_move_aver <-
bitcoin_new %>%
# Calculate 10-day simple moving average
tq_mutate(select = Close, mutate_fun = SMA, n = 10) %>%
# Rename 10-day SMA to SMA.short
rename(SMA.10Days = SMA)
bitcoin_move_aver
#https://datascienceplus.com/building-a-daily-bitcoin-price-tracker-with-coindeskr-and-shiny-in-r/
#https://www.r-bloggers.com/2021/05/sentiment-analysis-in-r-3/#:~:text=Sentiment%20Analysis%20is%20a%20process,opinion%20or%20sentences%20in%20text.
# Transform to long form to wide form for graphing
bitcoin_move_aver_10 <-
bitcoin_move_aver %>%
select(Date, Close, SMA.10Days) %>%
# Transform to long form
gather(key = "type", value = "price", Close:SMA.10Days)
bitcoin_move_aver_10
# Visualize
bitcoin_move_aver_10 %>%
ggplot(aes(x = Date, y = price, col = type)) +
geom_line() +
theme(legend.position="bottom") +
labs(title = "Simple Moving Averages ",
x = NULL,
y = "Bitcoin Prices")
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
corpus <- iconv(bitcoin_tweets$tweet)
corpus <- Corpus(VectorSource(corpus))
inspect(corpus[1:5])
#clean text
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
inspect(corpus[1:5])
cleanset <- tm_map(corpus, removeWords, stopwords('english'))
removeURL <- function(x) gsub('http[[:alnum:]]*', '', x)
remove_char <- function(x) gsub(	'’s','', x)
cleanset <- tm_map(cleanset, content_transformer(removeURL))
cleanset <- tm_map(cleanset, content_transformer(remove_char))
inspect(cleanset[1:5])
cleanset <- tm_map(cleanset, removeWords, 'bitcoin')
cleanset <- tm_map(cleanset, gsub,
pattern = 'crypto',
replacement = 'crypto')
cleanset <- tm_map(cleanset, stemDocument)
cleanset <- tm_map(cleanset, stripWhitespace)
inspect(cleanset[1:5])
tdm <- TermDocumentMatrix(cleanset)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
#https://www.r-bloggers.com/2021/05/sentiment-analysis-in-r-3/#:~:text=Sentiment%20Analysis%20is%20a%20process,opinion%20or%20sentences%20in%20text.
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
findFreqTerms(tdm, lowfreq = 4)
findAssocs(tdm, terms = "crypto", corlimit = 0.3)
head(d, 10)
barplot(d[1:10,]$freq, las = 2, names.arg = d[1:10,]$word,
col ="lightblue", main ="Most frequent words",
ylab = "Word frequencies")
#Sentiment analysis
library(syuzhet)
library(scales)
library(reshape2)
tweets <- iconv(bitcoin_tweets$tweet)
# get sentiment scores
s <- get_nrc_sentiment(tweets)
head(s)
barplot(colSums(s),
las = 2,
col = rainbow(10),
ylab = 'Count',
main = 'Sentiment Scores Tweets')
install.packages("ndjson")
library(ndjson)
library("sentimentr")
library(tidyverse)
sentiment=sentiment_by(bitcoin_tweets$tweet)
sentiment
summary(sentiment$ave_sentiment)
qplot(sentiment$ave_sentiment,   geom="histogram",binwidth=0.1,main="Review Sentiment Histogram")
bitcoin_tweets$ave_sentiment=sentiment$ave_sentiment
bitcoin_tweets$sd_sentiment=sentiment$sd
bitcoin_tweets <- bitcoin_tweets %>%
group_by(Date) %>%
mutate(avg_sentiment = mean(ave_sentiment))
bitcoin_tweets <- bitcoin_tweets %>%
mutate(sentiment_score = if_else(avg_sentiment > 0, 'positive', if_else(avg_sentiment < 0, 'negative', 'neutral')))
bitcoin_tweets_positive <- bitcoin_tweets %>%
filter(sentiment_score == "positive")
bitcoin_tweets_negative <- bitcoin_tweets %>%
filter(sentiment_score == "negative")
bitcoin_tweets_neutral <- bitcoin_tweets %>%
filter(sentiment_score == "neutral")
#write.csv(bitcoin_tweets_positive,"~/Desktop/Bootcamp/R project/bitcoin_tweets_positive.csv", row.names = TRUE)
#write.csv(bitcoin_tweets_negative,"~/Desktop/Bootcamp/R project/bitcoin_tweets_negative.csv", row.names = TRUE)
#write.csv(bitcoin_tweets_neutral,"~/Desktop/Bootcamp/R project/bitcoin_tweets_neutral.csv", row.names = TRUE)
bitcoin_tweets_positive
bitcoin_tweets_negative
bitcoin_tweets_neutral
## graphing data points from 2 different datasets on one graph
close_price <- xts(x = bitcoin$Close, order.by = bitcoin$Date)
positive_tweet <- xts(x = bitcoin_tweets_positive$Close, order.by = bitcoin_tweets_positive$Date)
negative_tweet <- xts(x = bitcoin_tweets_negative$Close, order.by = bitcoin_tweets_negative$Date)
neutral_tweet <- xts(x = bitcoin_tweets_neutral$Close, order.by = bitcoin_tweets_neutral$Date)
joined_graph <- cbind(close_price, positive_tweet, negative_tweet, neutral_tweet)
dygraph(joined_graph) %>%
dySeries("close_price", label = "Bitcoin price") %>%
dySeries("positive_tweet", label = "Positive tweets") %>%
dySeries("negative_tweet", label = "Negative tweets") %>%
dySeries("neutral_tweet", label = "Neutral tweets") %>%
dyRangeSelector()
bitcoin_tweets %>%
filter(Date == '2021-02-07')
write.csv(retweet_count,"~/Desktop/Bootcamp/R project/retweet_count.csv", row.names = TRUE)
write.csv(likes_count,"~/Desktop/Bootcamp/R project/likes_count.csv", row.names = TRUE)
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/Test2')
runApp('Desktop/Bootcamp/R project/Test2')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
p<-ggplot(replies_count, aes(x=year, y=Freq_of_replies, fill=Freq_of_replies)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) +         scale_y_continuous(name="Frequencies of replies")+ ggtitle("Replies Per Year")
p
p<-ggplot(retweet_count, aes(x=year, y=Freq_of_retweets, fill=Freq_of_retweets)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Frequencies of retweets") + ggtitle("Retweets Per Year")
p
p<-ggplot(likes_count, aes(x=year, y=Freq_of_likes/1000000, fill=Freq_of_likes)) +
geom_bar(stat="identity")+theme(plot.title = element_text(face="bold", hjust = 0.5), axis.title = element_text(face="bold")) + scale_y_continuous(name="Frequencies of likes") + ggtitle("Likes Per Year")
p
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test4')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
runApp('Desktop/Bootcamp/R project/test_5')
